# Nama workflow
name: Build and Release OpenWrt IPK

# Pemicu:
# 1. Setiap kali ada push ke branch 'main' (atau 'master')
# 2. Setiap kali ada tag baru dengan format 'v*.*.*' di-push
on:
  push:
    branches:
      - main
      - master
    tags:
      - "v*.*.*"

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Ganti dengan versi OpenWrt dan target arsitektur yang Anda inginkan.
        target:
          - {
              version: "19.07.9",
              arch: "ramips",
              subarch: "mt76x8",
              pkg_arch: "mipsel_24kc",
            }
          # Contoh target lain:
          # - { version: "22.03.5", arch: "ramips", subarch: "mt7621", pkg_arch: "mipsel_24kc" }

    steps:
      # Langkah 1: Mengambil kode sumber dari repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Langkah 2: Mengunduh dan mengekstrak OpenWrt SDK
      - name: Download and setup OpenWrt SDK
        run: |
          SDK_VERSION=${{ matrix.target.version }}
          SDK_ARCH=${{ matrix.target.arch }}
          SDK_SUBARCH=${{ matrix.target.subarch }}
          SDK_URL="https://downloads.openwrt.org/releases/${SDK_VERSION}/targets/${SDK_ARCH}/${SDK_SUBARCH}/openwrt-sdk-${SDK_VERSION}-${SDK_ARCH}-${SDK_SUBARCH}_gcc-7.5.0_musl.Linux-x86_64.tar.xz"

          echo "Downloading SDK from ${SDK_URL}"
          wget -q ${SDK_URL} -O openwrt-sdk.tar.xz
          tar -xf openwrt-sdk.tar.xz
          mv openwrt-sdk-* openwrt-sdk
          echo "WORK_DIR=$(pwd)/openwrt-sdk" >> $GITHUB_ENV

      # Langkah 3: Menyiapkan paket Anda di dalam SDK
      - name: Install package sources into SDK
        run: |
          cd ${{ env.WORK_DIR }}
          cp -r $GITHUB_WORKSPACE ./package/api_c

      # Langkah 4: Memperbarui feeds dan mengkompilasi paket
      - name: Compile the package
        id: compile
        run: |
          cd ${{ env.WORK_DIR }}
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          make package/api_c/compile V=s
          # Cari file .ipk dan simpan path-nya untuk langkah selanjutnya
          IPK_PATH=$(find bin/packages -type f -name "*.ipk")
          echo "ipk_path=${IPK_PATH}" >> $GITHUB_OUTPUT

      # Langkah 5: Unggah sebagai Artifact (HANYA UNTUK PUSH KE BRANCH)
      - name: Upload IPK as artifact
        # Kondisi: Jalankan hanya jika pemicunya BUKAN sebuah tag
        if: "!startsWith(github.ref, 'refs/tags/')"
        uses: actions/upload-artifact@v4
        with:
          name: api-c-ipk-${{ matrix.target.pkg_arch }}
          path: ${{ env.WORK_DIR }}/${{ steps.compile.outputs.ipk_path }}

      # Langkah 6: Buat Release dan Unggah Aset (HANYA UNTUK TAG)
      - name: Create GitHub Release and Upload Asset
        # Kondisi: Jalankan hanya jika pemicunya ADALAH sebuah tag
        if: "startsWith(github.ref, 'refs/tags/')"
        uses: softprops/action-gh-release@v2
        with:
          # Token GITHUB_TOKEN sudah disediakan otomatis oleh GitHub Actions
          token: ${{ secrets.GITHUB_TOKEN }}
          files: ${{ env.WORK_DIR }}/${{ steps.compile.outputs.ipk_path }}
